// In UpdateHelpers.fs -> line 388 processContextMenuClick
// look at all the cmd or msgs functions and the dispatch functions

// TJWC withMsg = global function (defined here as subfunction but could be global)
// sheetdispatch, rotateDispatch, flipDispatch] wrap the didpatch function
// you need more of the match to get at least two calls of the wrapped function or global function
// for this to be a sensible example

let processContextMenuClick
        (menuType: string) // name of menu
        (item: string) // name of menu item clicked
        (dispatch: Msg -> unit) // dispatch function
        (model: Model)
            : Model * Cmd<Msg> = // can change state directly (Model) or via a message wrapped in Cmd.ofMsg.

    let withNoCmd (model: Model) = model, Cmd.none
    let withMsg (msg: Msg) (model : Model)  = model,Cmd.ofMsg msg
    let withWireMsg msg = withMsg (Msg.Sheet (SheetT.Msg.Wire msg))
    let sheetDispatch = Sheet >> dispatch
    let keyDispatch = SheetT.KeyPress >> sheetDispatch
    let rotateDispatch = SheetT.Rotate >> sheetDispatch
    let flipDispatch = SheetT.Flip >> sheetDispatch

    match rightClickElement,item with
    ...
    | SheetMenuBreadcrumb(sheet,isSubSheet), "Lock" ->
        printfn "locking %s" sheet.SheetName
        model
        |> changeLockState isSubSheet sheet (fun _ -> Locked)
        |> withNoCmd
    | DBComp sym, "Properties" | DBCustomComp(sym, _), "Properties" ->
         model
        |> set selectedComponent_ (Some sym.Component)
        |> set (sheet_ >-> SheetT.selectedWires_) []
        |> set (sheet_ >-> SheetT.selectedComponents_) [sym.Id]
        |> set rightPaneTabVisible_ Properties
        |> withWireMsg (BusWireT.Msg.Symbol (SymbolT.SelectSymbols [sym.Id]))
    | DBScalingBox selectedcomps, "Rotate Clockwise (Ctrl+Right)"->
        rotateDispatch Degree90
        model 
        |> withWireMsg (BusWireT.Msg.UpdateConnectedWires selectedcomps)
    | DBCanvas pos, "Zoom-in (Alt+Up) and centre"  ->
        printf "Zoom-in!!"
        model
        |> map (sheet_ >-> SheetT.zoom_)  (fun zoom -> min Sheet.Constants.maxMagnification (zoom*Sheet.Constants.zoomIncrement))
        |> withMsg (Sheet (SheetT.Msg.KeepZoomCentered pos))
    ...